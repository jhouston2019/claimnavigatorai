exports.handler = async (event, context) => {
  // CORS headers
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    'Access-Control-Allow-Methods': 'POST, OPTIONS'
  };

  if (event.httpMethod === 'OPTIONS') {
    return { statusCode: 200, headers, body: '' };
  }

  try {
    const body = JSON.parse(event.body || '{}');
    const { inputText, type = 'general' } = body;

    if (!inputText) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: 'inputText is required' })
      };
    }

    // Simple demo response based on type
    let response = '';
    
    switch (type) {
      case 'claim_response':
        response = `Based on your input: "${inputText}"\n\nHere's a professional response:\n\nDear Claims Adjuster,\n\nThank you for your recent correspondence regarding my claim. I have reviewed your letter and would like to address the following points:\n\n1. [Your specific concerns]\n2. [Supporting documentation]\n3. [Request for clarification]\n\nI look forward to your prompt response.\n\nSincerely,\n[Your Name]`;
        break;
      case 'damage_assessment':
        response = `Damage Assessment Analysis:\n\nBased on your description: "${inputText}"\n\nKey Points:\n- Document all visible damage\n- Take detailed photographs\n- Obtain professional estimates\n- Keep all receipts and documentation\n\nNext Steps:\n1. Schedule professional inspection\n2. Gather supporting evidence\n3. Prepare detailed claim documentation`;
        break;
      case 'settlement_analysis':
        response = `Settlement Analysis:\n\nRegarding: "${inputText}"\n\nAnalysis:\n- Review settlement offer against policy terms\n- Compare with similar claims in your area\n- Consider all covered damages\n- Evaluate replacement vs. repair costs\n\nRecommendations:\n1. Document all damages thoroughly\n2. Obtain multiple estimates\n3. Review policy coverage carefully\n4. Consider professional consultation if needed`;
        break;
      default:
        response = `AI Response for: "${inputText}"\n\nThis is a demo response. In a production environment, this would be generated by AI based on your specific input and claim details.\n\nKey considerations:\n- Review all policy terms\n- Document everything thoroughly\n- Keep detailed records\n- Consider professional advice if needed`;
    }

    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        response,
        type,
        timestamp: new Date().toISOString()
      })
    };

  } catch (error) {
    console.error('Error:', error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ error: 'Internal server error' })
    };
  }
};
