const { PDFDocument } = require('pdf-lib');

exports.handler = async (event) => {
  if (event.httpMethod !== 'GET') {
    return {
      statusCode: 405,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ error: 'Method not allowed' })
    };
  }

  try {
    // Get user email from JWT token or use default
    let userEmail = 'user@claimnavigatorai.com';
    
    const authHeader = event.headers.authorization || event.headers.Authorization;
    if (authHeader && authHeader.startsWith('Bearer ')) {
      const token = authHeader.substring(7);
      try {
        const parts = token.split('.');
        if (parts.length === 3) {
          const payload = JSON.parse(Buffer.from(parts[1], 'base64').toString());
          if (payload && payload.email) {
            userEmail = payload.email;
          }
        }
      } catch (jwtError) {
        console.log("Could not decode JWT, using default email");
      }
    }
    
    console.log("Using user email for document protection:", userEmail);

    // Get document path from query parameters
    const { documentPath } = event.queryStringParameters || {};
    
    if (!documentPath) {
      return {
        statusCode: 400,
        body: JSON.stringify({ error: "Document path is required" })
      };
    }

    console.log(`Serving protected document for user: ${userEmail}, path: ${documentPath}`);

    // Try to fetch from the local Netlify site first
    const decodedPath = decodeURIComponent(documentPath);
    const localUrl = `https://claimnavigatorai.com/docs/${decodedPath}`;
    console.log('Fetching from:', localUrl);
    
    const response = await fetch(localUrl);
    console.log('Response status:', response.status);
    console.log('Response headers:', Object.fromEntries(response.headers.entries()));
    
    if (!response.ok) {
      console.error('Fetch failed:', response.status, response.statusText);
      const errorText = await response.text();
      console.error('Error response body:', errorText);
      return {
        statusCode: 404,
        body: JSON.stringify({ 
          error: "Document not found",
          url: localUrl,
          status: response.status,
          details: errorText
        })
      };
    }

    const originalPdfBuffer = Buffer.from(await response.arrayBuffer());
    console.log('Original PDF fetched, size:', originalPdfBuffer.length);

    // Apply watermarking using pdf-lib
    console.log('Loading PDF with pdf-lib...');
    const pdfDoc = await PDFDocument.load(originalPdfBuffer);
    const pages = pdfDoc.getPages();
    console.log(`PDF loaded successfully, ${pages.length} pages`);
    
    // Add watermark to each page
    for (let i = 0; i < pages.length; i++) {
      const page = pages[i];
      const { width, height } = page.getSize();
      
      console.log(`Adding watermark to page ${i + 1}, size: ${width}x${height}`);
      
      // Add watermark at the bottom center of each page
      page.drawText(`Generated by ClaimNavigatorAI for ${userEmail}`, {
        x: width / 2 - 150, // Center horizontally (approximate)
        y: 30, // Bottom margin
        size: 8,
        color: { r: 0.7, g: 0.7, b: 0.7 }, // Light gray
        opacity: 0.6
      });
    }
    
    console.log('Saving watermarked PDF...');
    const watermarkedPdfBytes = await pdfDoc.save();
    const watermarkedBuffer = Buffer.from(watermarkedPdfBytes);
    
    console.log(`PDF watermarked for user: ${userEmail}, new size: ${watermarkedBuffer.length}`);

    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="protected-${decodedPath.split('/').pop()}"`,
        'Content-Length': watermarkedBuffer.length,
        'Cache-Control': 'no-cache'
      },
      body: watermarkedBuffer.toString('base64'),
      isBase64Encoded: true
    };

  } catch (err) {
    console.error("Error serving protected document:", err);
    
    return {
      statusCode: 500,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        error: err.message || "Failed to serve protected document",
        ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
      })
    };
  }
};