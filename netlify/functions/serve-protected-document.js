const { generateSecurePDF } = require('./utils/pdf-security');
const { getUserFromAuth } = require('./utils/auth');
const fs = require('fs');
const path = require('path');

exports.handler = async (event) => {
  try {
    // Validate HTTP method
    if (event.httpMethod !== 'GET') {
      return {
        statusCode: 405,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ error: 'Method not allowed' })
      };
    }

    // For now, use a simple user identifier approach
    // We'll get the user email from the request or use a default
    let userEmail = 'user@claimnavigatorai.com'; // Default fallback
    
    // Try to get user info from various sources
    const authHeader = event.headers.authorization || event.headers.Authorization;
    if (authHeader && authHeader.startsWith('Bearer ')) {
      const token = authHeader.substring(7);
      console.log("Found Bearer token, attempting to extract user info");
      
      try {
        // Try to decode the JWT token to get user info (simple base64 decode)
        const parts = token.split('.');
        if (parts.length === 3) {
          const payload = JSON.parse(Buffer.from(parts[1], 'base64').toString());
          if (payload && payload.email) {
            userEmail = payload.email;
            console.log("Extracted user email from token:", userEmail);
          }
        }
      } catch (jwtError) {
        console.log("Could not decode JWT, using default email");
      }
    }
    
    // Try to get user from getUserFromAuth as fallback
    try {
      const user = await getUserFromAuth(event);
      if (user && user.email) {
        userEmail = user.email;
        console.log("Got user email from getUserFromAuth:", userEmail);
      }
    } catch (authError) {
      console.log("getUserFromAuth failed, using extracted/default email:", userEmail);
    }
    
    console.log("Using user email for document protection:", userEmail);

    // Get document path from query parameters
    const { documentPath } = event.queryStringParameters || {};
    
    console.log('Full event object:', JSON.stringify(event, null, 2));
    console.log('Query string parameters:', event.queryStringParameters);
    console.log('Document path received:', documentPath);
    
    if (!documentPath) {
      return {
        statusCode: 400,
        body: JSON.stringify({ error: "Document path is required" })
      };
    }

    console.log(`Serving protected document for user: ${userEmail}, path: ${documentPath}`);

    // Construct the GitHub URL for the document
    const githubUrl = `https://raw.githubusercontent.com/jhouston2019/claimnavigatorai/main/docs/${documentPath}`;
    console.log(`Fetching document from GitHub: ${githubUrl}`);
    
    // Fetch the document from GitHub
    let originalPdfBuffer;
    try {
      const response = await fetch(githubUrl);
      if (!response.ok) {
        throw new Error(`GitHub fetch failed: ${response.status} ${response.statusText}`);
      }
      originalPdfBuffer = Buffer.from(await response.arrayBuffer());
      console.log(`Successfully fetched document from GitHub, size: ${originalPdfBuffer.length} bytes`);
    } catch (fetchError) {
      console.error(`Error fetching document from GitHub:`, fetchError.message);
      return {
        statusCode: 404,
        body: JSON.stringify({ 
          error: "Document not found",
          githubUrl: githubUrl,
          fetchError: fetchError.message
        })
      };
    }
    
    // Load the original PDF and add security
    const { PDFDocument } = require('pdf-lib');
    const originalPdf = await PDFDocument.load(originalPdfBuffer);
    const protectedPdf = await PDFDocument.create();
    
    // Copy all pages from original to new document
    const pages = await protectedPdf.copyPages(originalPdf, originalPdf.getPageIndices());
    pages.forEach(page => protectedPdf.addPage(page));
    
    // Add watermark to each page
    const allPages = protectedPdf.getPages();
    for (let i = 0; i < allPages.length; i++) {
      const page = allPages[i];
      const { width, height } = page.getSize();
      
      // Add watermark at the bottom center of each page
      page.drawText(`Generated by ClaimNavigatorAI for ${userEmail}`, {
        x: width / 2 - 150, // Center horizontally (approximate)
        y: 30, // Bottom margin
        size: 8,
        color: { r: 0.7, g: 0.7, b: 0.7 }, // Light gray
        opacity: 0.6
      });
    }
    
    // Set document metadata
    protectedPdf.setTitle(`ClaimNavigatorAI Template - ${path.basename(documentPath, '.pdf')}`);
    protectedPdf.setAuthor('ClaimNavigatorAI');
    protectedPdf.setSubject('Insurance Claim Template');
    protectedPdf.setKeywords(['claim', 'insurance', 'template', 'document']);
    protectedPdf.setProducer('ClaimNavigatorAI');
    protectedPdf.setCreator('ClaimNavigatorAI');
    
    // Save the protected PDF
    const finalPdfBytes = await protectedPdf.save();
    const finalPdfBuffer = Buffer.from(finalPdfBytes);

    console.log(`Protected document generated successfully. Size: ${finalPdfBuffer.length} bytes`);

    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="protected-${path.basename(documentPath)}"`,
        'Content-Length': finalPdfBuffer.length,
        'Cache-Control': 'no-cache'
      },
      body: finalPdfBuffer.toString('base64'),
      isBase64Encoded: true
    };

  } catch (err) {
    console.error("Error serving protected document:", {
      message: err.message,
      stack: err.stack
    });
    
    return {
      statusCode: 500,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        error: err.message || "Failed to serve protected document",
        ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
      })
    };
  }
};
