const { generateSecurePDF } = require('./utils/pdf-security');
const { getUserFromAuth } = require('./utils/auth');
const fs = require('fs');
const path = require('path');

exports.handler = async (event) => {
  try {
    // Validate HTTP method
    if (event.httpMethod !== 'GET') {
      return {
        statusCode: 405,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ error: 'Method not allowed' })
      };
    }

    // Authenticate user
    let user;
    try {
      user = await getUserFromAuth(event);
    } catch (authError) {
      console.error("Authentication error:", authError.message);
      return {
        statusCode: 401,
        body: JSON.stringify({ error: "Authentication required" })
      };
    }

    // Get document path from query parameters
    const { documentPath } = event.queryStringParameters || {};
    
    if (!documentPath) {
      return {
        statusCode: 400,
        body: JSON.stringify({ error: "Document path is required" })
      };
    }

    console.log(`Serving protected document for user: ${user.email}, path: ${documentPath}`);

    // Construct the full path to the document
    const fullPath = path.join(process.cwd(), 'docs', documentPath);
    
    // Check if file exists
    if (!fs.existsSync(fullPath)) {
      console.error(`Document not found: ${fullPath}`);
      return {
        statusCode: 404,
        body: JSON.stringify({ error: "Document not found" })
      };
    }

    // Read the original PDF
    const originalPdfBuffer = fs.readFileSync(fullPath);
    
    // Load the original PDF and add security
    const { PDFDocument } = require('pdf-lib');
    const originalPdf = await PDFDocument.load(originalPdfBuffer);
    const protectedPdf = await PDFDocument.create();
    
    // Copy all pages from original to new document
    const pages = await protectedPdf.copyPages(originalPdf, originalPdf.getPageIndices());
    pages.forEach(page => protectedPdf.addPage(page));
    
    // Add watermark to each page
    const allPages = protectedPdf.getPages();
    for (let i = 0; i < allPages.length; i++) {
      const page = allPages[i];
      const { width, height } = page.getSize();
      
      // Add watermark at the bottom center of each page
      page.drawText(`Generated by ClaimNavigatorAI for ${user.email}`, {
        x: width / 2 - 150, // Center horizontally (approximate)
        y: 30, // Bottom margin
        size: 8,
        color: { r: 0.7, g: 0.7, b: 0.7 }, // Light gray
        opacity: 0.6
      });
    }
    
    // Set document metadata
    protectedPdf.setTitle(`ClaimNavigatorAI Template - ${path.basename(documentPath, '.pdf')}`);
    protectedPdf.setAuthor('ClaimNavigatorAI');
    protectedPdf.setSubject('Insurance Claim Template');
    protectedPdf.setKeywords(['claim', 'insurance', 'template', 'document']);
    protectedPdf.setProducer('ClaimNavigatorAI');
    protectedPdf.setCreator('ClaimNavigatorAI');
    
    // Save the protected PDF
    const finalPdfBytes = await protectedPdf.save();
    const finalPdfBuffer = Buffer.from(finalPdfBytes);

    console.log(`Protected document generated successfully. Size: ${finalPdfBuffer.length} bytes`);

    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="protected-${path.basename(documentPath)}"`,
        'Content-Length': finalPdfBuffer.length,
        'Cache-Control': 'no-cache'
      },
      body: finalPdfBuffer.toString('base64'),
      isBase64Encoded: true
    };

  } catch (err) {
    console.error("Error serving protected document:", {
      message: err.message,
      stack: err.stack
    });
    
    return {
      statusCode: 500,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        error: err.message || "Failed to serve protected document",
        ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
      })
    };
  }
};
