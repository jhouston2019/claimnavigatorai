const { PDFDocument } = require('pdf-lib');

exports.handler = async (event) => {
  try {
    // Get document path from query parameters
    const { documentPath } = event.queryStringParameters || {};
    
    console.log('Simple document protection called with path:', documentPath);
    
    if (!documentPath) {
      return {
        statusCode: 400,
        body: JSON.stringify({ error: "Document path is required" })
      };
    }

    // Construct the GitHub URL for the document
    const githubUrl = `https://raw.githubusercontent.com/jhouston2019/claimnavigatorai/main/docs/${documentPath}`;
    console.log('Fetching from GitHub:', githubUrl);
    
    // Fetch the document from GitHub
    const response = await fetch(githubUrl);
    if (!response.ok) {
      console.error('GitHub fetch failed:', response.status, response.statusText);
      return {
        statusCode: 404,
        body: JSON.stringify({ 
          error: "Document not found",
          githubUrl: githubUrl,
          status: response.status
        })
      };
    }

    const originalPdfBuffer = Buffer.from(await response.arrayBuffer());
    console.log('Fetched PDF, size:', originalPdfBuffer.length);

    // Load the original PDF and add watermark
    const originalPdf = await PDFDocument.load(originalPdfBuffer);
    const protectedPdf = await PDFDocument.create();
    
    // Copy all pages from original to new document
    const pages = await protectedPdf.copyPages(originalPdf, originalPdf.getPageIndices());
    pages.forEach(page => protectedPdf.addPage(page));
    
    // Add watermark to each page
    const allPages = protectedPdf.getPages();
    for (let i = 0; i < allPages.length; i++) {
      const page = allPages[i];
      const { width, height } = page.getSize();
      
      // Add watermark at the bottom center of each page
      page.drawText('Generated by ClaimNavigatorAI - Protected Document', {
        x: width / 2 - 150,
        y: 30,
        size: 8,
        color: { r: 0.7, g: 0.7, b: 0.7 },
        opacity: 0.6
      });
    }
    
    // Set document metadata
    protectedPdf.setTitle('ClaimNavigatorAI Protected Document');
    protectedPdf.setAuthor('ClaimNavigatorAI');
    protectedPdf.setSubject('Insurance Claim Document');
    protectedPdf.setKeywords(['claim', 'insurance', 'protected']);
    protectedPdf.setProducer('ClaimNavigatorAI');
    protectedPdf.setCreator('ClaimNavigatorAI');
    
    // Save the protected PDF
    const finalPdfBytes = await protectedPdf.save();
    const finalPdfBuffer = Buffer.from(finalPdfBytes);

    console.log('Protected PDF generated, size:', finalPdfBuffer.length);

    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="protected-${documentPath.split('/').pop()}"`,
        'Content-Length': finalPdfBuffer.length,
        'Cache-Control': 'no-cache'
      },
      body: finalPdfBuffer.toString('base64'),
      isBase64Encoded: true
    };

  } catch (err) {
    console.error("Error in simple document protection:", err);
    
    return {
      statusCode: 500,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        error: err.message || "Failed to protect document",
        stack: err.stack
      })
    };
  }
};
