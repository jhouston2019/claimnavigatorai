const { PDFDocument } = require('pdf-lib');

exports.handler = async (event) => {
  try {
    // Get document path from query parameters
    const { documentPath } = event.queryStringParameters || {};
    
    console.log('Simple document protection called with path:', documentPath);
    
    if (!documentPath) {
      return {
        statusCode: 400,
        body: JSON.stringify({ error: "Document path is required" })
      };
    }

    // Try to fetch from the local Netlify site first
    const localUrl = `${process.env.SITE_URL || process.env.URL || 'https://claimnavigatorai.com'}/docs/${documentPath}`;
    console.log('Fetching from local Netlify site:', localUrl);
    
    let originalPdfBuffer;
    let response;
    
    try {
      response = await fetch(localUrl);
      if (response.ok) {
        originalPdfBuffer = Buffer.from(await response.arrayBuffer());
        console.log('Fetched PDF from local site, size:', originalPdfBuffer.length);
      } else {
        throw new Error(`Local fetch failed: ${response.status}`);
      }
    } catch (localError) {
      console.log('Local fetch failed, trying GitHub:', localError.message);
      
      // Fallback to GitHub
      const githubUrl = `https://raw.githubusercontent.com/jhouston2019/claimnavigatorai/main/docs/${documentPath}`;
      console.log('Fetching from GitHub:', githubUrl);
      
      response = await fetch(githubUrl);
      if (!response.ok) {
        console.error('Both local and GitHub fetch failed');
        return {
          statusCode: 404,
          body: JSON.stringify({ 
            error: "Document not found",
            localUrl: localUrl,
            githubUrl: githubUrl,
            localError: localError.message,
            githubStatus: response.status
          })
        };
      }

      originalPdfBuffer = Buffer.from(await response.arrayBuffer());
      console.log('Fetched PDF from GitHub, size:', originalPdfBuffer.length);
    }

    // Load the original PDF and add watermark
    console.log('Loading PDF with pdf-lib...');
    const originalPdf = await PDFDocument.load(originalPdfBuffer);
    console.log('PDF loaded successfully, pages:', originalPdf.getPageCount());
    
    const protectedPdf = await PDFDocument.create();
    console.log('Created new PDF document');
    
    // Copy all pages from original to new document
    console.log('Copying pages...');
    const pages = await protectedPdf.copyPages(originalPdf, originalPdf.getPageIndices());
    console.log('Pages copied, adding to new document...');
    pages.forEach(page => protectedPdf.addPage(page));
    console.log('Pages added to new document');
    
    // Add watermark to each page
    console.log('Adding watermarks...');
    const allPages = protectedPdf.getPages();
    for (let i = 0; i < allPages.length; i++) {
      const page = allPages[i];
      const { width, height } = page.getSize();
      
      // Add watermark at the bottom center of each page
      page.drawText('Generated by ClaimNavigatorAI - Protected Document', {
        x: width / 2 - 150,
        y: 30,
        size: 8,
        color: { r: 0.7, g: 0.7, b: 0.7 },
        opacity: 0.6
      });
    }
    console.log('Watermarks added to all pages');
    
    // Set document metadata
    console.log('Setting document metadata...');
    protectedPdf.setTitle('ClaimNavigatorAI Protected Document');
    protectedPdf.setAuthor('ClaimNavigatorAI');
    protectedPdf.setSubject('Insurance Claim Document');
    protectedPdf.setKeywords(['claim', 'insurance', 'protected']);
    protectedPdf.setProducer('ClaimNavigatorAI');
    protectedPdf.setCreator('ClaimNavigatorAI');
    console.log('Metadata set');
    
    // Save the protected PDF
    console.log('Saving protected PDF...');
    const finalPdfBytes = await protectedPdf.save();
    const finalPdfBuffer = Buffer.from(finalPdfBytes);
    console.log('Protected PDF saved, final size:', finalPdfBuffer.length);

    console.log('Protected PDF generated, size:', finalPdfBuffer.length);

    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="protected-${documentPath.split('/').pop()}"`,
        'Content-Length': finalPdfBuffer.length,
        'Cache-Control': 'no-cache'
      },
      body: finalPdfBuffer.toString('base64'),
      isBase64Encoded: true
    };

  } catch (err) {
    console.error("Error in simple document protection:", err);
    console.error("Error stack:", err.stack);
    console.error("Error name:", err.name);
    console.error("Error message:", err.message);
    
    return {
      statusCode: 500,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        error: err.message || "Failed to protect document",
        errorName: err.name,
        stack: err.stack,
        documentPath: documentPath
      })
    };
  }
};
