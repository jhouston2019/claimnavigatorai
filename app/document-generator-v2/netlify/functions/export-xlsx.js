const ExcelJS = require('exceljs');

exports.handler = async (event, context) => {
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS'
  };

  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers,
      body: ''
    };
  }

  try {
    const { content, userData, docTitle, fields } = JSON.parse(event.body);
    
    if (!content) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: 'Missing content' })
      };
    }

    // Create XLSX workbook
    const workbook = createXLSXWorkbook(content, userData, docTitle, fields);
    
    // Generate XLSX buffer
    const buffer = await workbook.xlsx.writeBuffer();
    
    return {
      statusCode: 200,
      headers: {
        ...headers,
        'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'Content-Disposition': `attachment; filename="${docTitle || 'document'}.xlsx"`
      },
      body: buffer.toString('base64'),
      isBase64Encoded: true
    };

  } catch (error) {
    console.error('XLSX generation error:', error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ error: 'Failed to generate XLSX' })
    };
  }
};

function createXLSXWorkbook(content, userData, docTitle, fields) {
  const workbook = new ExcelJS.Workbook();
  const worksheet = workbook.addWorksheet(docTitle || 'Document');

  // Header information (frozen rows)
  const headerInfo = userData && userData.userName ? 
    `Claim Navigator AI — Confidential Claim File | Policyholder: ${userData.userName} | Policy #: ${userData.policyNumber || '[Policy Number]'} | Claim #: ${userData.claimNumber || '[Claim Number]'}` :
    'Demo Document – Header Info Not Available';

  // Add header rows
  worksheet.addRow([headerInfo]);
  worksheet.addRow([`Date of Loss: ${userData?.dateOfLoss || '[Date of Loss]'} | Property: ${userData?.propertyAddress || '[Property Address]'}`]);
  worksheet.addRow([]); // Empty row for spacing

  // Style header rows
  worksheet.getRow(1).font = { bold: true, size: 12, color: { argb: 'FF1e40af' } };
  worksheet.getRow(1).fill = {
    type: 'pattern',
    pattern: 'solid',
    fgColor: { argb: 'FFF8FAFC' }
  };
  worksheet.getRow(2).font = { size: 10, color: { argb: 'FF666666' } };
  worksheet.getRow(2).fill = {
    type: 'pattern',
    pattern: 'solid',
    fgColor: { argb: 'FFF8FAFC' }
  };

  // Add document title
  worksheet.addRow([docTitle || 'Document']);
  worksheet.getRow(4).font = { bold: true, size: 16, color: { argb: 'FF1e40af' } };
  worksheet.addRow([]); // Empty row

  // Add content based on document type
  if (fields && fields.some(field => field.type === 'table')) {
    // Create table structure for spreadsheet documents
    const tableFields = fields.filter(field => field.type === 'table');
    tableFields.forEach(tableField => {
      if (tableField.columns) {
        // Add table headers
        worksheet.addRow(tableField.columns);
        const headerRow = worksheet.lastRow;
        headerRow.font = { bold: true, color: { argb: 'FFFFFFFF' } };
        headerRow.fill = {
          type: 'pattern',
          pattern: 'solid',
          fgColor: { argb: 'FF1e40af' }
        };
        
        // Add sample data rows
        for (let i = 0; i < 5; i++) {
          const row = tableField.columns.map(() => '');
          worksheet.addRow(row);
        }
      }
    });
  } else {
    // Add form fields as rows
    fields?.forEach(field => {
      if (field.type !== 'table') {
        worksheet.addRow([field.label, '']);
      }
    });
  }

  // Add footer
  worksheet.addRow([]);
  worksheet.addRow(['© ClaimNavigatorAI — Confidential · Generated by Claim Navigator AI']);
  const footerRow = worksheet.lastRow;
  footerRow.font = { italic: true, size: 10, color: { argb: 'FF999999' } };
  footerRow.alignment = { horizontal: 'center' };

  // Auto-fit columns
  worksheet.columns.forEach(column => {
    column.width = 20;
  });

  // Freeze header rows
  worksheet.views = [
    { state: 'frozen', ySplit: 3 }
  ];

  return workbook;
}