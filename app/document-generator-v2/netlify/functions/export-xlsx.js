const XLSX = require('xlsx');

exports.handler = async (event, context) => {
  // Set CORS headers
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'GET, OPTIONS'
  };

  // Handle preflight requests
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers,
      body: ''
    };
  }

  try {
    const { docId, userData: userDataParam } = event.queryStringParameters;
    
    if (!docId) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: 'Missing docId parameter' })
      };
    }

    // Get user data from query parameters
    const userData = userDataParam ? JSON.parse(decodeURIComponent(userDataParam)) : {};
    
    // Create header data
    const headerData = userData.userName ? [
      ['Claim Navigator AI — Confidential Claim File'],
      [`Policyholder: ${userData.userName} | Policy #: ${userData.policyNumber || 'N/A'} | Claim #: ${userData.claimNumber || 'N/A'}`],
      [`Date of Loss: ${userData.dateOfLoss || 'N/A'} | Property: ${userData.propertyAddress || 'N/A'}`],
      ['']
    ] : [
      ['Claim Navigator AI — Confidential Claim File'],
      ['']
    ];

    // Create worksheet data with header
    const worksheetData = [
      ...headerData,
      [`${docId.replace(/-/g, ' ').toUpperCase()} - Generated on ${new Date().toLocaleDateString()}`],
      [''],
      ['Document Information:'],
      ['Document Type:', docId],
      ['Generated Date:', new Date().toLocaleDateString()],
      ['Generated By:', 'ClaimNavigatorAI Document Generator'],
      [''],
      ['This is an XLSX export of the', docId, 'document.'],
      [''],
      ['© ClaimNavigatorAI — Confidential · Generated by Claim Navigator AI']
    ];

    // Create workbook and worksheet
    const workbook = XLSX.utils.book_new();
    const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);
    
    // Set column widths
    worksheet['!cols'] = [
      { wch: 30 },
      { wch: 20 },
      { wch: 15 }
    ];

    // Add worksheet to workbook
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Document');

    // Generate XLSX buffer
    const buffer = XLSX.write(workbook, { 
      type: 'buffer', 
      bookType: 'xlsx' 
    });
    
    const base64XLSX = buffer.toString('base64');

    return {
      statusCode: 200,
      headers: {
        ...headers,
        'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'Content-Disposition': `attachment; filename="${docId}.xlsx"`
      },
      body: base64XLSX,
      isBase64Encoded: true
    };

  } catch (error) {
    console.error('XLSX export error:', error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ 
        error: 'Failed to generate XLSX',
        details: error.message 
      })
    };
  }
};
