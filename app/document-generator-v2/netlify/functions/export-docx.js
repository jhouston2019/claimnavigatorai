const { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType } = require('docx');

exports.handler = async (event, context) => {
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS'
  };

  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers,
      body: ''
    };
  }

  try {
    const { content, userData, docTitle } = JSON.parse(event.body);
    
    if (!content) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: 'Missing content' })
      };
    }

    // Create DOCX document
    const doc = createDOCXDocument(content, userData, docTitle);
    
    // Generate DOCX buffer
    const buffer = await Packer.toBuffer(doc);
    
    return {
      statusCode: 200,
      headers: {
        ...headers,
        'Content-Type': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'Content-Disposition': `attachment; filename="${docTitle || 'document'}.docx"`
      },
      body: buffer.toString('base64'),
      isBase64Encoded: true
    };

  } catch (error) {
    console.error('DOCX generation error:', error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ error: 'Failed to generate DOCX' })
    };
  }
};

function createDOCXDocument(content, userData, docTitle) {
  const headerInfo = userData && userData.userName ? 
    `Claim Navigator AI — Confidential Claim File\nPolicyholder: ${userData.userName} | Policy #: ${userData.policyNumber || '[Policy Number]'} | Claim #: ${userData.claimNumber || '[Claim Number]'}\nDate of Loss: ${userData.dateOfLoss || '[Date of Loss]'} | Property: ${userData.propertyAddress || '[Property Address]'}` :
    'Demo Document – Header Info Not Available';

  const children = [
    // Header section
    new Paragraph({
      children: [
        new TextRun({
          text: "Claim Navigator AI — Confidential Claim File",
          bold: true,
          size: 18,
          color: "1e40af"
        })
      ],
      alignment: AlignmentType.CENTER,
      spacing: { after: 200 }
    }),
    
    new Paragraph({
      children: [
        new TextRun({
          text: headerInfo,
          size: 20,
          color: "666666"
        })
      ],
      alignment: AlignmentType.CENTER,
      spacing: { after: 400 }
    }),

    // Document title
    new Paragraph({
      children: [
        new TextRun({
          text: docTitle || "Document",
          bold: true,
          size: 24,
          color: "1e40af"
        })
      ],
      alignment: AlignmentType.CENTER,
      spacing: { after: 400 }
    }),

    // Content
    new Paragraph({
      children: [
        new TextRun({
          text: content,
          size: 22
        })
      ],
      spacing: { after: 400 }
    }),

    // Footer
    new Paragraph({
      children: [
        new TextRun({
          text: "© ClaimNavigatorAI — Confidential · Generated by Claim Navigator AI",
          italic: true,
          size: 18,
          color: "999999"
        })
      ],
      alignment: AlignmentType.CENTER,
      spacing: { before: 800 }
    })
  ];

  return new Document({
    sections: [{
      properties: {},
      children: children
    }]
  });
}